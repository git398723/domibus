// Employed ebMS3 profile. used for configuration validation. Supported values are: AS4, ESENS, UNDEFINED
// NOT SUPPORTED YET
EmployedProfile : UNDEFINED

MPCs{
	// Configuration Id
	MPC defaultMpc {
		// Used by default. There may only be one default MPC
		Default : true
		// IF enabled = false this MPC will not accept any messages
		Enabled : true
		// corresponding to eb:Messaging/eb:UserMessage/@mpc
		Name : 'http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/defaultMPC'
		/** 
		 * Message retention in minutes.
		 * 0 = delete immediately
		 * -1 = keep indefinitely
		 */
		MessageRetentionDownloaded : 0
		MessageRetentionUnDownloaded : 60
	} 
		
}

Parties{
	PartyIdTypes{
		Type exampleType : 'http://www.domibus.eu/exampleType'
	}
	/**
	 * Internal name of party entity.  
	 * Use this as the alias for the corresponding pubilc encryption key in your keystore.
	 */
	Party exampleInitiator {
		/**
		 * One entity may have multiple PartyIdType:PartyId entries.
		 * This example resolves to: 
		 * <eb:PartyId type="http://www.domibus.eu/exampleType">exampleInitiatorId</eb:PartyId> 
		 */
		exampleType : 'exampleInitiatorId'
		Endpoint : 'http://localhost:8080/domibus/services/msh'
		/**
		 * This value is interpreted by the employed submission module,
		 * if an errorHandling with enabled process error notifications is used.
		 * The format is dependant on the submission module. I.e. a JMS module might expect a queuename
		 * while a webservice module might expect an URL. As the default submission module has no
		 * back channel to the backend this value is ignored.
		 */
		SenderErrorsTo : 'http://localhost:9090/errorhandling'
		ReceiverErrorsTo : 'http://localhost:9090/errorhandling'
	}
	Party exampleResponder {
		exampleType : 'exampleResponderId'
		Endpoint : 'http://localhost:8180/domibus/services/msh'
		SenderErrorsTo : 'http://localhost:9190/errorhandling'
		ReceiverErrorsTo : 'http://localhost:9190/errorhandling'
	}
	
}

AS4{	
	// AS4 reliability configuration.
	// REPLY PATTERN CALLBACK IS NOT SUPPORTED YET
	Reliability exampleReliabilityNonrepudiationFalseReplypatternResponse : Nonrepudiation  = false Replypattern = response
	Reliability exampleReliabilityNonrepudiationTrueReplypatternResponse : Nonrepudiation  = true Replypattern = response
	/**
	 * AS4 reception awareness configuration.
	 * retryTimeout in minutes
	 * only supported strategy is CONSTANT
	 * duplicateDetection checks the full TB_MESSAGE_LOG table for duplicates 
	 */
	ReceptionAwareness exampleReceptionAwarenessRetryThreeDuplicateDetectionFalse : retryTimeout = 1 retryCount = 6 strategy = CONSTANT duplicateDetection = false  	
	ReceptionAwareness exampleReceptionAwarenessRetryThreeDuplicateDetectionTrue : retryTimeout = 1 retryCount = 6 strategy = CONSTANT duplicateDetection = true	
}

Securities{
	Security exampleSecurity {
		// WS-SecurityPolicy file in ${domibus.config.location}
		Policy : 'exampleSecurityPolicy.xml' 
		// Allowed values are: RSA_SHA256, RSA_SHA1
		SignatureMethod : RSA_SHA256 
	}
}

BusinessProcessConfiguration{
	
	Agreements{
		// resolves to: <eb:AgreementRef>http://domibus.eu/agreement</eb:AgreementRef>
		Agreement exampleAgreement : 'http://domibus.eu/agreement'	
	}
	
	Actions{
		// resolves to: <eb:Action>SendMessage</eb:Action>
		Action sendMessage : 'SendMessage'
		Action sendMessageNoRepudiation : 'SendMessageNoRepudiation'
	}
	
	Services{
		ServiceTypes {
			Type exampleServiceType : 'exampleService'
		}
		// resolves to: <eb:Service type="exampleService">AS4</eb:Service>
		Service as4Service : 'AS4' type = exampleServiceType Actions {sendMessage sendMessageNoRepudiation}		 
	}
	
	ExchangePatterns{
		Patterns{
			MEP oneway : 'http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/oneWay' Legs = 1
			// NOT SUPPORTED YET
			MEP twoway : 'http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/twoWay' Legs = 2
		}
		Bindings{
			Binding push : 'http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/push'
			// NOT SUPPORTED YET
			Binding pull : 'http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/pull'			
			Binding sync : 'http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/sync'
		}
	}
	
	Roles{
		// resolves to: <eb:Role>http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/defaultRole</eb:Role>
		Role default : 'http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/defaultRole'
		Role exampleMessageProducer : 'exampleMessageProducer'
		Role exampleMessageReceiver : 'exampleMessageReceiver'	
	}
	
	Processes{
		PayloadProfiles{
			Payloads{
				Payload asicsPayload : cid = 'asic-s@e-codex.eu' mime = 'application/vnd.etsi.asic-s+zip' required = true 
				Payload businessContentInBody : cid = '' mime = 'text/xml' inBody = true required = true
				Payload businessContentAsAttachment : cid = 'businessDocement@e-codex.eu' mime = 'text/xml' required = true
				Payload submissionAcceptanceEvidence : cid = 'submissionAcceptance@e-codex.eu' mime = 'text/xml' required = true
			}
			Profile ecodexMessageProfile : asicsPayload businessContentInBody submissionAcceptanceEvidence maxSize=1024
		}	
		
		PropertySets{
			Properties{
				Property originalSenderProperty : key=originalSender type = string required= true
				Property finalRecipientProperty : key=finalRecipient type = string required= true
			}
			Set ecodexPropertySet: finalRecipientProperty originalSenderProperty 
		}
		
		ErrorHandlings{
			ErrorHandling ecodexErrorHandling {
				ErrorAsResponse : true
				ProcessErrorNotifyProducer : true
				// Note that only errorneous messages with a valid pmode can be reported
				ProcessErrorNotifyConsumer : true
				DeliveryFailureNotifyProducer : true				
			}	
		}
		
		Legs{
			Leg examplePushLegOne {
				ReceptionAwareness : exampleReceptionAwarenessRetryThreeDuplicateDetectionTrue
				PayloadProfile : ecodexMessageProfile
				ProperySet : ecodexPropertySet
				Service : as4Service
				Action : sendMessage
				DefaultMpc : defaultMpc
				mpc exampleInitiator : defaultMpc 
				mpc exampleResponder : defaultMpc
				Security : exampleSecurity
				Reliability : exampleReliabilityNonrepudiationTrueReplypatternResponse
				ErrorHandling : ecodexErrorHandling
				CompressPayloads : false
			}	
			Leg examplePushLegOneNoNonRepudiation {
				ReceptionAwareness : exampleReceptionAwarenessRetryThreeDuplicateDetectionTrue
				PayloadProfile : ecodexMessageProfile
				ProperySet : ecodexPropertySet
				Service : as4Service
				Action : sendMessageNoRepudiation
				DefaultMpc : defaultMpc
				mpc exampleInitiator : defaultMpc 
				mpc exampleResponder : defaultMpc
				Security : exampleSecurity
				Reliability : exampleReliabilityNonrepudiationFalseReplypatternResponse
				ErrorHandling : ecodexErrorHandling
				CompressPayloads : false
			}
			Leg examplePushLegOneNoNonRepudiationCompressionTrue {
				ReceptionAwareness : exampleReceptionAwarenessRetryThreeDuplicateDetectionTrue
				PayloadProfile : ecodexMessageProfile
				ProperySet : ecodexPropertySet
				Service : as4Service
				Action : sendMessageNoRepudiation
				DefaultMpc : defaultMpc
				mpc exampleInitiator : defaultMpc 
				mpc exampleResponder : defaultMpc
				Security : exampleSecurity
				Reliability : exampleReliabilityNonrepudiationFalseReplypatternResponse
				ErrorHandling : ecodexErrorHandling
				CompressPayloads : true
			}
			
		}
		
		Process as4exampleProcess{
			Agreement : exampleAgreement
			Mep : oneway
			Binding : push
			InitiatorRole : exampleMessageProducer
			ResponderRole : exampleMessageReceiver
			// all parties that are allowed to send a message as initiator
			InitiatorParties : exampleInitiator, exampleResponder
			// all parties that are allowed to send a message as responder
			ResponderParties : exampleResponder, exampleInitiator
			Legs : examplePushLegOne
		}
		
		Process as4exampleNoNonRepudiation{
			Agreement : exampleAgreement
			Mep : oneway
			Binding : push
			InitiatorRole : exampleMessageProducer
			ResponderRole : exampleMessageReceiver
			InitiatorParties : exampleInitiator
			ResponderParties : exampleResponder
			Legs : examplePushLegOneNoNonRepudiation
		}
		Process as4exampleNoNonRepudiationCompressionTrue{
			Agreement : exampleAgreement
			Mep : oneway
			Binding : push
			InitiatorRole : exampleMessageProducer
			ResponderRole : exampleMessageReceiver
			InitiatorParties : exampleInitiator
			ResponderParties : exampleResponder
			Legs : examplePushLegOneNoNonRepudiationCompressionTrue
		}			
	}
}
