/*
 * Copyright 2015 e-CODEX Project
 *
 * Licensed under the EUPL, Version 1.1 or â€“ as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the
 * Licence.
 * You may obtain a copy of the Licence at:
 * http://ec.europa.eu/idabc/eupl5
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 */

package eu.domibus.submission.webService.generated;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.0.1 2014-08-21T15:09:50.806+02:00
 * Generated source version: 3.0.1
 */
@WebServiceClient(name = "BackendService_1_1",
        wsdlLocation = "BackendService_1_1.wsdl",
        targetNamespace = "http://org.ecodex.backend/1_1/")
public class BackendService11 extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://org.ecodex.backend/1_1/", "BackendService_1_1");
    public static final QName BACKEND_PORT = new QName("http://org.ecodex.backend/1_1/", "BACKEND_PORT");

    static {
        URL url = BackendService11.class.getResource("BackendService_1_1.wsdl");
        if (url == null) {
            url = BackendService11.class.getClassLoader().getResource("BackendService_1_1.wsdl");
        }
        if (url == null) {
            java.util.logging.Logger.getLogger(BackendService11.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}",
                            "BackendService_1_1.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public BackendService11(final URL wsdlLocation) {
        super(wsdlLocation, BackendService11.SERVICE);
    }

    public BackendService11(final URL wsdlLocation, final QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BackendService11() {
        super(BackendService11.WSDL_LOCATION, BackendService11.SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BackendService11(final WebServiceFeature... features) {
        super(BackendService11.WSDL_LOCATION, BackendService11.SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BackendService11(final URL wsdlLocation, final WebServiceFeature... features) {
        super(wsdlLocation, BackendService11.SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public BackendService11(final URL wsdlLocation, final QName serviceName, final WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * @return returns BackendInterface
     */
    @WebEndpoint(name = "BACKEND_PORT")
    public BackendInterface getBackendPort() {
        return super.getPort(BackendService11.BACKEND_PORT, BackendInterface.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to
     *                 configure on the proxy. Supported features not in the
     *                 {@code features} parameter will have their default values.
     * @return returns BackendInterface
     */
    @WebEndpoint(name = "BACKEND_PORT")
    public BackendInterface getBackendPort(final WebServiceFeature... features) {
        return super.getPort(BackendService11.BACKEND_PORT, BackendInterface.class, features);
    }
}
